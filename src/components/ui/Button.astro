---
interface Props {
    variant?: "solid" | "outline";
    href?: string;
    onClick?: () => void;
    class?: string;
}

const { variant = "solid", href, onClick, class: className } = Astro.props;

const baseClasses =
    "flex items-center justify-center flex-auto font-inter text-lg font-bold leading-none m-0 outline-none px-4 py-4 text-center no-underline transition-shadow whitespace-nowrap border-0 select-none touch-manipulation rounded-xl transition-all duration-600 ease-[ease]";

const solidClasses =
    "bg-white text-black hover:shadow-[0_0_0_3px_#121212,transparent_0_0_0_0] hover:bg-[#AFAFAF]";
const outlineClasses =
    "bg-transparent text-white border-2 border-white relative overflow-hidden before:content-[''] before:absolute before:top-0 before:left-[-100%] before:w-full before:h-full before:bg-gradient-to-r before:from-transparent before:via-white/20 before:to-transparent before:transition-all before:duration-500 hover:before:left-[100%] hover:bg-white hover:text-black";

const variantClasses = variant === "solid" ? solidClasses : outlineClasses;

const Tag = href ? "a" : "button";
---

<Tag
    class={`${baseClasses} ${variantClasses} ${className}`}
    {...href && { href }}
    {...onClick && { onClick }}
>
    <slot />
</Tag>
