---
export interface Props {
  sponsors: Array<{
    name: string;
    logo: string;
    alt: string;
  }>;
  autoScroll?: boolean;
}

const { sponsors, autoScroll = false } = Astro.props;
---

<div class="sponsors-grid" data-animate-sponsors-grid data-auto-scroll={autoScroll}>
  <div class="sponsors-track">
    {sponsors.map((sponsor, index) => (
      <div 
        class="sponsor-item" 
        data-animate-sponsor 
        style={`--delay: ${index}`}
      >
        <img 
          src={sponsor.logo} 
          alt={sponsor.alt} 
          class="sponsor-logo" 
          loading="lazy" 
          decoding="async" 
        />
      </div>
    ))}
    <!-- Duplicate for seamless loop on mobile -->
    {sponsors.map((sponsor, index) => (
      <div 
        class="sponsor-item sponsor-duplicate" 
        data-animate-sponsor 
        style={`--delay: ${index + sponsors.length}`}
      >
        <img 
          src={sponsor.logo} 
          alt={sponsor.alt} 
          class="sponsor-logo" 
          loading="lazy" 
          decoding="async" 
        />
      </div>
    ))}
  </div>
</div>

<style lang="scss">
.sponsors-grid {
  width: 100%;
  overflow: hidden;
  margin: 4rem 0;
}

.sponsors-track {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 4rem;
  flex-wrap: wrap;
  transition: transform 0.3s ease;
}

.sponsor-item {
  transform: translateY(30px) scale(0.8);
  opacity: 0;
  width: 15rem;
  height: 12rem;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  transition-delay: calc(var(--delay) * 0.2s);
  flex-shrink: 0;
}

.sponsor-item.animate-in {
  transform: translateY(0) scale(1);
  opacity: 1;
}

.sponsor-logo {
  height: 10rem;
  max-width: 100%;
  object-fit: contain;
  transition: all 0.3s ease;
  cursor: pointer;
  filter: brightness(0.9);
}

.sponsor-logo:hover {
  transform: scale(1.1);
  filter: brightness(1);
}

/* Desktop and Tablet */
@media (min-width: 769px) {
  .sponsor-duplicate {
    display: none;
  }
}

/* Mobile Responsive */
@media (max-width: 768px) {
  .sponsors-grid {
    margin: 3rem 0;
  }
  
  .sponsors-track {
    gap: 3rem;
    justify-content: flex-start;
    flex-wrap: nowrap;
  }
  
  .sponsor-item {
    width: 12rem;
    height: 10rem;
  }
  
  .sponsor-logo {
    height: 8rem;
  }
  
  /* Auto-scroll animation for mobile */
  .sponsors-grid[data-auto-scroll="true"] .sponsors-track {
    animation: scroll-sponsors 20s linear infinite;
    animation-play-state: running;
  }
  
  .sponsors-grid[data-auto-scroll="true"]:hover .sponsors-track {
    animation-play-state: paused;
  }
}

@media (max-width: 480px) {
  .sponsors-track {
    gap: 2rem;
  }
  
  .sponsor-item {
    width: 10rem;
    height: 8rem;
  }
  
  .sponsor-logo {
    height: 6rem;
  }
  
  /* Faster scroll for smaller screens */
  .sponsors-grid[data-auto-scroll="true"] .sponsors-track {
    animation-duration: 15s;
  }
}

@media (max-width: 360px) {
  .sponsor-item {
    width: 8rem;
    height: 6rem;
  }
  
  .sponsor-logo {
    height: 5rem;
  }
}

@keyframes scroll-sponsors {
  0% {
    transform: translateX(0);
  }
  100% {
    transform: translateX(-50%);
  }
}

/* Pause animation when user prefers reduced motion */
@media (prefers-reduced-motion: reduce) {
  .sponsors-grid[data-auto-scroll="true"] .sponsors-track {
    animation: none;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Enable auto-scroll on mobile devices
  function enableAutoScroll() {
    const sponsorGrids = document.querySelectorAll('.sponsors-grid');
    
    sponsorGrids.forEach(grid => {
      if (window.innerWidth <= 768) {
        grid.setAttribute('data-auto-scroll', 'true');
      } else {
        grid.setAttribute('data-auto-scroll', 'false');
      }
    });
  }
  
  // Initial check
  enableAutoScroll();
  
  // Check on resize
  window.addEventListener('resize', enableAutoScroll);
  
  // Intersection Observer for animations
  if (typeof IntersectionObserver !== 'undefined') {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const sponsors = entry.target.querySelectorAll('[data-animate-sponsor]');
          sponsors.forEach(sponsor => {
            if (!sponsor.classList.contains('sponsor-duplicate')) {
              sponsor.classList.add('animate-in');
            }
          });
          observer.unobserve(entry.target);
        }
      });
    }, {
      threshold: 0.3,
      rootMargin: '0px 0px -50px 0px'
    });

    const sponsorGrids = document.querySelectorAll('[data-animate-sponsors-grid]');
    sponsorGrids.forEach(grid => observer.observe(grid));
  }
});
</script>