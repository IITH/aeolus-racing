---
interface Props {
  title: string;
  images: string[];
  className?: string;
}

const { title, images, className = "" } = Astro.props;
---

<div class={`gallery-component ${className}`} data-animate-gallery>
  <h2 class="gallery-title">{title}</h2>
  <div class="gallery-container">
    {images.map((image, index) => (
      <div 
        class="gallery-card" 
        data-animate-gallery-item 
        style={`--delay: ${index * 0.1}s`}
      >
        <div class="image-container">
          <img 
            src={image} 
            alt={`Gallery image ${index + 1}`} 
            loading="lazy" 
          />
          <div class="gallery-image-overlay">
            <div class="image-actions">
              <button 
                class="action-btn fullscreen-btn" 
                data-image={image}
                aria-label="View fullscreen"
              >
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 3H5a2 2 0 00-2 2v3m18 0V5a2 2 0 00-2-2h-3m0 18h3a2 2 0 002-2v-3M3 16v3a2 2 0 002 2h3"/>
                </svg>
              </button>
              <button 
                class="action-btn download-btn" 
                data-image={image}
                aria-label="Download image"
              >
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v12m0 0l-4-4m4 4l4-4M3 17v3a2 2 0 002 2h14a2 2 0 002-2v-3"/>
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>
    ))}
  </div>
  
  <!-- Fullscreen Modal -->
  <div class="fullscreen-modal" id="fullscreen-modal">
    <div class="modal-backdrop"></div>
    <div class="modal-content">
      <button class="modal-close" id="modal-close" aria-label="Close fullscreen">
        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
        </svg>
      </button>
      <img class="modal-image" id="modal-image" src="" alt="" />
    </div>
  </div>
</div>

<style lang="scss">
  @use "../sections/_Gallery.scss";
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Gallery animation observer
    if (typeof IntersectionObserver !== 'undefined') {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const element = entry.target;
            
            if (element.hasAttribute('data-animate-gallery')) {
              element.classList.add('animate-in');
              
              setTimeout(() => {
                const items = element.querySelectorAll('[data-animate-gallery-item]');
                items.forEach((item) => {
                  item.classList.add('animate-in');
                });
              }, 300);
              
              observer.unobserve(element);
            }
          }
        });
      }, {
        threshold: 0.2,
        rootMargin: '0px 0px -50px 0px'
      });

      const galleries = document.querySelectorAll('[data-animate-gallery]');
      galleries.forEach(gallery => observer.observe(gallery));
    }
    
    // Fullscreen functionality
    const modal = document.getElementById('fullscreen-modal');
    const modalImage = document.getElementById('modal-image');
    const modalClose = document.getElementById('modal-close');
    const modalBackdrop = modal?.querySelector('.modal-backdrop');
    
    // Fullscreen buttons
    document.querySelectorAll('.fullscreen-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        e.stopPropagation();
        const imageSrc = btn.getAttribute('data-image');
        if (modal && modalImage && imageSrc) {
          modalImage.src = imageSrc;
          modal.classList.add('active');
          document.body.style.overflow = 'hidden';
        }
      });
    });
    
    // Download buttons
    document.querySelectorAll('.download-btn').forEach(btn => {
      btn.addEventListener('click', async (e) => {
        e.stopPropagation();
        const imageSrc = btn.getAttribute('data-image');
        if (imageSrc) {
          try {
            const response = await fetch(imageSrc);
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `aeolus-racing-${Date.now()}.jpg`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
          } catch (error) {
            console.error('Download failed:', error);
            // Fallback: open image in new tab
            window.open(imageSrc, '_blank');
          }
        }
      });
    });
    
    // Close modal functionality
    function closeModal() {
      if (modal) {
        modal.classList.remove('active');
        document.body.style.overflow = '';
      }
    }
    
    modalClose?.addEventListener('click', closeModal);
    modalBackdrop?.addEventListener('click', closeModal);
    
    // Close modal with Escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && modal?.classList.contains('active')) {
        closeModal();
      }
    });
  });
</script>