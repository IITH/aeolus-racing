---
// Timeline.astro
export interface TimelineItem {
  year: string;
  title: string;
  description: string;
}

export interface Props {
  items: TimelineItem[];
  className?: string;
}

const { items, className = "" } = Astro.props;
---

<div class={`timeline ${className}`} data-timeline-container>
  <div class="timeline-line" data-timeline-line></div>
  {items.map((item, index) => (
    <div 
      class="timeline-item" 
      data-animate-timeline
      style={`--item-index: ${index}`}
    >
      <div class="timeline-dot"></div>
      <div class="timeline-content">
        <div class="timeline-year">{item.year}</div>
        <h4 class="timeline-title">{item.title}</h4>
        <p class="timeline-description">{item.description}</p>
      </div>
    </div>
  ))}
</div>

<style lang="scss">
  @use "../sections/_Timeline.scss";
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    if (typeof IntersectionObserver !== 'undefined') {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const container = entry.target;
            
            // Animate the timeline line first
            const line = container.querySelector('[data-timeline-line]');
            if (line) {
              setTimeout(() => {
                line.classList.add('animate-in');
              }, 200);
            }
            
            // Then animate the timeline items
            const items = container.querySelectorAll('[data-animate-timeline]');
            items.forEach((item) => {
              item.classList.add('animate-in');
            });
            
            observer.unobserve(container);
          }
        });
      }, {
        threshold: 0.2,
        rootMargin: '0px 0px -100px 0px'
      });

      const containers = document.querySelectorAll('[data-timeline-container]');
      containers.forEach(container => {
        observer.observe(container);
      });
    }
  });
</script>