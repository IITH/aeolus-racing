---
// Timeline.astro
export interface TimelineItem {
  year: string;
  title: string;
  description: string;
}

export interface Props {
  items: TimelineItem[];
  className?: string;
}

const { items, className = "" } = Astro.props;
---

<div class={`timeline ${className}`} data-timeline-container>
  <div class="timeline-line" data-timeline-line></div>
  {items.map((item, index) => (
    <div 
      class="timeline-item" 
      data-animate-timeline
      style={`--item-index: ${index}`}
    >
      <div class="timeline-dot"></div>
      <div class="timeline-content">
        <div class="timeline-year">{item.year}</div>
        <h4 class="timeline-title">{item.title}</h4>
        <p class="timeline-description">{item.description}</p>
      </div>
    </div>
  ))}
</div>

<style>
  .timeline {
    position: relative;
    padding: 1rem 0;
  }
  
  .timeline-line {
    position: absolute;
    left: 8px;
    top: 0;
    bottom: 0;
    width: 2px;
    background: linear-gradient(to bottom, #ff0000, rgba(255, 0, 0, 0.3));
    border-radius: 1px;
    transform: scaleY(0);
    transform-origin: top;
    transition: transform 1.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }
  
  .timeline-line.animate-in {
    transform: scaleY(1);
  }
  
  .timeline-item {
    position: relative;
    display: flex;
    align-items: flex-start;
    margin-bottom: 3rem;
    padding-left: 2.5rem;
    transform: translateY(30px);
    opacity: 0;
    transition: all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    transition-delay: calc(var(--item-index) * 0.2s + 0.3s);
  }
  
  .timeline-item.animate-in {
    transform: translateY(0);
    opacity: 1;
  }
  
  .timeline-dot {
    position: absolute;
    left: 4px;
    top: 8px;
    width: 10px;
    height: 10px;
    background: #ff0000;
    border: 2px solid #000;
    border-radius: 50%;
    z-index: 2;
    transform: scale(0);
    transition: all 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
    transition-delay: calc(var(--item-index) * 0.2s + 0.6s);
  }
  
  .timeline-item.animate-in .timeline-dot {
    transform: scale(1);
  }
  
  .timeline-item:hover .timeline-dot {
    transform: scale(1.2);
    box-shadow: 0 0 0 4px rgba(255, 0, 0, 0.15);
  }
  
  .timeline-content {
    flex: 1;
    transition: transform 0.3s ease;
  }
  
  .timeline-item:hover .timeline-content {
    transform: translateX(5px);
  }
  
  .timeline-year {
    font-size: 1.3rem;
    font-weight: 700;
    color: #ff0000;
    margin-bottom: 0.5rem;
    transition: all 0.3s ease;
    transform: translateX(-10px);
    opacity: 0;
    transition-delay: calc(var(--item-index) * 0.2s + 0.8s);
  }
  
  .timeline-item.animate-in .timeline-year {
    transform: translateX(0);
    opacity: 1;
  }
  
  .timeline-item:hover .timeline-year {
    color: #ff3333;
    transform: translateX(3px);
  }
  
  .timeline-title {
    font-size: 1.2rem;
    font-weight: 600;
    color: white;
    margin: 0 0 0.5rem 0;
    transition: all 0.3s ease;
    transform: translateX(-10px);
    opacity: 0;
    transition-delay: calc(var(--item-index) * 0.2s + 0.9s);
  }
  
  .timeline-item.animate-in .timeline-title {
    transform: translateX(0);
    opacity: 1;
  }
  
  .timeline-item:hover .timeline-title {
    color: rgba(255, 255, 255, 0.95);
  }
  
  .timeline-description {
    font-size: 1rem;
    color: rgba(255, 255, 255, 0.7);
    margin: 0;
    line-height: 1.5;
    transition: all 0.3s ease;
    transform: translateX(-10px);
    opacity: 0;
    transition-delay: calc(var(--item-index) * 0.2s + 1s);
  }
  
  .timeline-item.animate-in .timeline-description {
    transform: translateX(0);
    opacity: 1;
  }
  
  .timeline-item:hover .timeline-description {
    color: rgba(255, 255, 255, 0.85);
  }

  /* Mobile adjustments */
  @media (max-width: 768px) {
    .timeline-item {
      padding-left: 2rem;
      margin-bottom: 2.5rem;
    }
    
    .timeline-line {
      left: 6px;
    }
    
    .timeline-dot {
      left: 2px;
      width: 8px;
      height: 8px;
    }
    
    .timeline-year {
      font-size: 1.1rem;
    }
    
    .timeline-title {
      font-size: 1.1rem;
    }
    
    .timeline-description {
      font-size: 0.9rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    if (typeof IntersectionObserver !== 'undefined') {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const container = entry.target;
            
            // Animate the timeline line first
            const line = container.querySelector('[data-timeline-line]');
            if (line) {
              setTimeout(() => {
                line.classList.add('animate-in');
              }, 200);
            }
            
            // Then animate the timeline items
            const items = container.querySelectorAll('[data-animate-timeline]');
            items.forEach((item) => {
              item.classList.add('animate-in');
            });
            
            observer.unobserve(container);
          }
        });
      }, {
        threshold: 0.2,
        rootMargin: '0px 0px -100px 0px'
      });

      const containers = document.querySelectorAll('[data-timeline-container]');
      containers.forEach(container => {
        observer.observe(container);
      });
    }
  });
</script>